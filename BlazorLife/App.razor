@using System.Diagnostics;

<header>
        <div class="lifeContent">
    @if (!_started && _generationsPassed == 0)
    {
        <div>
            <select class="lifeStartDropDown" @onchange="OnStartModeSelected">
                <option value=@StartOptions.Random selected="@(_startOptions == StartOptions.Random)">Random (10% alive)</option>
                <option value=@StartOptions.Blank selected="@(_startOptions == StartOptions.Blank)">Blank</option>
            </select>
        </div>
    }
    else
    {
        <h2 class="lifeText">Generations passed @_generationsPassed</h2>
    }

    <form class="lifeForm" @onsubmit="OnStartStop" @onreset="OnReset">
        @if (_started)
        {
            <button class="lifeControlButton lifeStarted" type="submit">Stop life simulation</button>
        }
        else if (_generationsPassed == 0)
        {
            <button class="lifeControlButton" type="submit">Start life simulation</button>
        }
        else
        {
            <button class="lifeControlButton" type="submit">Resume life simulation</button>
            <button class="lifeControlButton" type="reset">Reset life simulation</button>
        }
    </form>

    <GliderModeSwitch @ref="_gliderSwitch" InitialIsGlider="true" InitialDirection="GliderDirection.UpLeft"/>
</div>

@if (!_started && _generationsPassed == 0)
{
    <input type="range" min="2" max="50" step="2" value="@_pixelSize" class="lifeSlider" @onchange="OnSliderValueChange">
}
</header>
<article>
    <GridRenderer @ref="_gridRenderer" SimStarted="@_started" PixelSize="@_pixelSize" OnRenderFrame="OnRenderFrame" OnJsClick="JsOnClick"/>
</article>

@code {

    private Grid _grid = null;

    private int _pixelSize = 4;

    private int _generationsPassed = 0;

    private bool _started = false;

    private StartOptions _startOptions = StartOptions.Random;

    private GliderModeSwitch _gliderSwitch;

    private GridRenderer _gridRenderer; 

    public async Task OnStartModeSelected(ChangeEventArgs evt)
    {
        var newValue = Enum.Parse<StartOptions>((string) evt.Value);
        if (newValue != _startOptions)
        {
            _startOptions = newValue;
            await OnReset();
        }
    }

    public void JsOnClick(int x, int y)
    {
        if (_gliderSwitch.IsGlider)
        {
            var glider = LifeFormsHelper.GetGlider(_gliderSwitch.GliderDirection, _grid, x, y);
            var (alive, aliveCounter) = (new CellData[5], 0);
            var (dead, deadCounter) = (new CellData[4], 0);
            foreach (var cell in glider)
            {
                _grid.Set(cell.x, cell.y, cell.isAlive);
                var cellData = new CellData { X = cell.x, Y = cell.y };
                if (cell.isAlive)
                {
                    alive[aliveCounter++] = cellData;
                }
                else
                {
                    dead[deadCounter++] = cellData;
                }
            }
            if (!_started)
            {
                _gridRenderer.ProcessDiff(alive, dead);
            }
        }
        else
        {
            var isAlive = !_grid[x, y];
            _grid.Set(x, y, isAlive);
            var cellData = new [] { new CellData { X = x, Y = y } };
            var (alive, dead) = isAlive ? (cellData, (CellData[]) null) : (null, cellData);
            if (!_started)
            {
                _gridRenderer.ProcessDiff(alive, dead);
            }
        }
    }

    public async Task OnSliderValueChange(ChangeEventArgs evt)
    {
        _pixelSize = int.Parse((string) evt.Value);

        var (rows, cols) = await _gridRenderer.Resize(_pixelSize);
        _grid = null;
        _gridRenderer.RenderInitState();
    }

    private void OnStartStop()
    {
        if (_started)
        {
            _started = false;
        }
        else
        {
            _started = true;
            _gridRenderer.NotifyStarted();
            _gridRenderer.RenderNextFrame();
        }
    }

    private async Task OnReset()
    {
        _grid = null;
        await _gridRenderer.Clear();
        _gridRenderer.RenderInitState();
        _generationsPassed = 0;
    }


    private (CellData[] alive, int aliveLength, CellData[] dead, int deadLength) OnRenderFrame()
    {
        if (_grid == null)
        {
            var (rows, cols) = _gridRenderer.GridDimensions;
            _grid = Grid.Create(cols, rows, _startOptions, 0.1);
            return _grid.GetAliveCells();
        }
        else if (!_started)
        {
            return _grid.GetAliveCells();
        }

        _generationsPassed++;
        StateHasChanged();

        var timer = Stopwatch.StartNew();
        var gen = _grid.NextGeneration();
        Console.WriteLine(timer.ElapsedMilliseconds);
        return gen;
    }
}
@page "/"
@inject WindowInterop _windowInterop;

<h2 class="lifeText">Generations passed @_generationsPassed</h2>
<form @onsubmit="OnStartStop" @onreset="OnReset">
    @if (_started)
    {
        <button class="lifeControlButton" type="submit">Stop life simulation</button>
    }
    else if (_generationsPassed == 0)
    {
        <button class="lifeControlButton" type="submit">Start life simulation</button>
    }
    else
    {
        <button class="lifeControlButton" type="submit">Continue life simulation</button>
        <button class="lifeControlButton" type="reset">Reset life simulation</button>
    }
</form>

<div class="gliderMode">
    <input type="checkbox" id="gliderMode-checkbox" value=@_isGlider @onchange=@OnGliderModeValueChange >
    <label class="gliderMode-label" for="gliderMode-checkbox">
        <span class="gliderMode-inner"></span>
    </label>
</div>

@code {
    private Grid _grid;

    private int _delay = 20;

    private int _pixelSize = 10;

    private int _generationsPassed = 0;

    private bool _started = false;

    private bool _isGlider = true;

    private (int Rows, int Cols) _size;

    [JSInvokable]
    public async Task JsOnClick(CellData[] cells)
    {
        foreach (var cell in cells)
        {
            _grid.Set(cell.X, cell.Y, cell.IsAlive);
        }
        await Task.Yield();
    }

    protected override async Task OnInitializedAsync()
    {
        await _windowInterop.Init(DotNetObjectReference.Create(this), _pixelSize, _isGlider);

        var (rows, cols) = _size = await _windowInterop.GetSize(_pixelSize);

        _grid = new Grid(cols, rows, 0.1);
        await _windowInterop.Paint(_grid.GetAliveCells());
    }

    private async Task OnGliderModeValueChange(ChangeEventArgs  evt)
    {
        _isGlider = !_isGlider;
        await _windowInterop.SwitchMode(_isGlider);
    }

    private async Task OnStartStop()
    {
        if (_started)
        {
            _started = false;
        }
        else
        {
            _started = true;
            await OnStart();
        }
    }

    private async Task OnReset()
    {
        await _windowInterop.Clear();
        _grid = new Grid(_size.Cols, _size.Rows, 0.1);
        await _windowInterop.Paint(_grid.GetAliveCells());
        _generationsPassed = 0;
    }

    private async Task OnStart()
    {
        while (_started)
        {
            var data = _grid.NextGeneration();
            await _windowInterop.Paint(data.alive, data.dead);
            _generationsPassed++;
            await Task.Delay(_delay);
            StateHasChanged();
        }
    }
}

@inject WindowInterop _windowInterop;

<div class="gliderMode">
    <input type="checkbox" id="gliderModeCheckbox" value=@IsGlider @onchange=OnGliderModeValueChange>
    <label class="gliderModeLabel" for="gliderModeCheckbox">
        <span class="gliderModeInner"></span>
    </label>
</div>

@if (IsGlider)
{
    <div>
        <div class="gliderDirection">
            <label class="gliderDirectionLabel">
                <input type="radio"
                       class="gliderDirectionRadio"
                       name="gliderDirection"
                       value="@GliderDirection.UpLeft"
                       @onchange="OnDirectionChange"
                       checked="@(GliderDirection == GliderDirection.UpLeft)">
                <span class="gliderDirectionBox"></span>
            </label>
            <label class="gliderDirectionLabel">
                <input type="radio"
                       class="gliderDirectionRadio"
                       name="gliderDirection"
                       value="@GliderDirection.UpRight"
                       @onchange="OnDirectionChange"
                       checked="@(GliderDirection == GliderDirection.UpRight)">
                <span class="gliderDirectionBox"></span>
            </label>
            <label class="gliderDirectionLabel">
                <input type="radio"
                       class="gliderDirectionRadio"
                       name="gliderDirection"
                       value="@GliderDirection.DownLeft"
                       @onchange="OnDirectionChange"
                       checked="@(GliderDirection == GliderDirection.DownLeft)">
                <span class="gliderDirectionBox"></span>
            </label>
            <label class="gliderDirectionLabel">
                <input type="radio"
                       class="gliderDirectionRadio"
                       name="gliderDirection"
                       value="@GliderDirection.DownRight"
                       @onchange="OnDirectionChange"
                       checked="@(GliderDirection == GliderDirection.DownRight)">
                <span class="gliderDirectionBox"></span>
            </label>
        </div>
    </div>
}

@code {

    [Parameter]
    public bool? InitialIsGlider { get; set; }

    [Parameter]
    public GliderDirection? InitialDirection { get; set; }

    public bool IsGlider { get; private set; } = true;

    public GliderDirection GliderDirection { get; private set; } = GliderDirection.UpRight;

    protected override async Task OnInitializedAsync()
    {
        if (InitialIsGlider.HasValue)
        {
            IsGlider = InitialIsGlider.Value;
        }

        if (InitialDirection.HasValue)
        {
            GliderDirection = InitialDirection.Value;
        }

        await base.OnInitializedAsync();
        await _windowInterop.SetGliderMode(IsGlider, GliderDirection);
    }

    private async Task OnDirectionChange(ChangeEventArgs evt)
    {
        GliderDirection = Enum.Parse<GliderDirection>((string)evt.Value);
        await _windowInterop.SetGliderDirection(GliderDirection);
    }

    private async Task OnGliderModeValueChange(ChangeEventArgs evt)
    {
        IsGlider = !IsGlider;
        await _windowInterop.SetGliderMode(IsGlider);
    }
}

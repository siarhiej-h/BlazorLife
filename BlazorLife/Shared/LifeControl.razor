@inject WindowInterop _windowInterop;

<div class="lifeContent">
    @if (!_started && _generationsPassed == 0)
    {
        <div>
            <select class="lifeStartDropDown" @onchange="OnStartModeSelected">
                <option value=@StartOptions.Random selected="@(_startOptions == StartOptions.Random)">Random (10% alive)</option>
                <option value=@StartOptions.Blank selected="@(_startOptions == StartOptions.Blank)">Blank</option>
            </select>
        </div>
    }
    else
    {
        <h2 class="lifeText">Generations passed @_generationsPassed</h2>
    }

    <form class="lifeForm" @onsubmit="OnStartStop" @onreset="OnReset">
        @if (_started)
        {
            <button class="lifeControlButton lifeStarted" type="submit">Stop life simulation</button>
        }
        else if (_generationsPassed == 0)
        {
            <button class="lifeControlButton" type="submit">Start life simulation</button>
        }
        else
        {
            <button class="lifeControlButton" type="submit">Resume life simulation</button>
            <button class="lifeControlButton" type="reset">Reset life simulation</button>
        }
    </form>

    <GliderModeSwitch IsGlider="true" InitialDirection="GliderDirection.UpLeft" />
</div>

@if (!_started && _generationsPassed == 0)
{
    <input type="range" min="2" max="50" step="2" value="@_pixelSize" class="lifeSlider" @onchange="OnSliderValueChange">
}

@code {
    private Grid _grid;

    private int _delay = 20;

    private int _pixelSize = 4;

    private int _generationsPassed = 0;

    private bool _started = false;

    private StartOptions _startOptions = StartOptions.Random;

    private (int Rows, int Cols) _size;

    [JSInvokable]
    public async Task JsOnClick(CellData[] cells)
    {
        foreach (var cell in cells)
        {
            _grid.Set(cell.X, cell.Y, cell.IsAlive);
        }
        await Task.Yield();
    }

    public async Task OnStartModeSelected(ChangeEventArgs evt)
    {
        var newValue = Enum.Parse<StartOptions>((string)evt.Value);
        if (newValue == _startOptions)
        {
            await Task.Yield();
        }

        _startOptions = newValue;
        await OnReset();
    }

    public async Task OnSliderValueChange(ChangeEventArgs evt)
    {
        _pixelSize = int.Parse((string) evt.Value);
        
        await _windowInterop.Resize(_pixelSize);

        var (rows, cols) = _size = await _windowInterop.GetSize();

        _grid = Grid.Create(cols, rows, _startOptions, 0.1);
        await _windowInterop.PaintBitmap(BitHelper.ConvertToIntegers(_grid.GetAliveCells()));
    }

    protected override async Task OnInitializedAsync()
    {
        await _windowInterop.Init(DotNetObjectReference.Create(this), _pixelSize);

        var (rows, cols) = _size = await _windowInterop.GetSize();

        _grid = Grid.Create(cols, rows, _startOptions, 0.1);
        await _windowInterop.PaintBitmap(BitHelper.ConvertToIntegers(_grid.GetAliveCells()));
    }

    private async Task OnStartStop()
    {
        if (_started)
        {
            _started = false;
        }
        else
        {
            _started = true;
            await OnStart();
        }
    }

    private async Task OnReset()
    {
        await _windowInterop.Clear();
        _grid = Grid.Create(_size.Cols, _size.Rows, _startOptions, 0.1);
        await _windowInterop.PaintBitmap(BitHelper.ConvertToIntegers(_grid.GetAliveCells()));
        _generationsPassed = 0;
    }

    private async Task OnStart()
    {
        while (_started)
        {
            var data = _grid.NextGeneration();
            await _windowInterop.PaintBitmap(BitHelper.ConvertToIntegers(data));
            _generationsPassed++;
            await Task.Delay(_delay);
            StateHasChanged();
        }
    }
}
